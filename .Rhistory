# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries as a list
geometries <- st_geometry(city_shape)
city_data$geometries[city_data$city == city & city_data$state == state] <- geometries
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$geometries <- NA
city_data$polygons <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries as a list
geometries <- st_geometry(city_shape)
polygons <- lapply(geometries, function(geom) {
lapply(st_coordinates(geom), function(coord) {
list(x = coord[1], y = coord[2])
})
})
return(list(geometries = geometries, polygons = polygons))
} else {
return(list(geometries = NA, polygons = NA))
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(result = pmap(list(city, state), get_city_shapefile)) %>%
mutate(
geometries = map(result, "geometries"),
polygons = map(result, "polygons")
) %>%
select(-result)
# Check the updated DataFrame
print(city_data)
sf)
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$geometries <- NA
city_data$polygons <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries as a list
geometries <- st_geometry(city_shape)
polygons <- lapply(geometries, function(geom) {
lapply(st_coordinates(geom), function(coord) {
list(x = coord[1], y = coord[2])
})
})
return(list(geometries = geometries, polygons = polygons))
} else {
return(list(geometries = NA, polygons = NA))
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(result = pmap(list(city, state), get_city_shapefile)) %>%
mutate(
geometries = map(result, "geometries"),
polygons = map(result, "polygons")
) %>%
select(-result)
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$geometries <- NA
city_data$polygons <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries as a list
geometries <- st_geometry(city_shape)
return(geometries)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(geometries = pmap(list(city, state), get_city_shapefile))
# Check the updated DataFrame
print(city_data)
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$geometries <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries
geometries <- st_geometry(city_shape)
return(geometries)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(geometries = pmap(list(city, state), get_city_shapefile))
# Convert the list of geometries to an sfc object
city_data$geometries <- st_sfc(city_data$geometries, crs = 4326)
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$geometries <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_city_shapefile <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
city_shape <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(city_shape) > 0) {
# Ensure it's a MULTIPOLYGON
city_shape <- st_cast(city_shape, "MULTIPOLYGON")
# Extract geometries
geometries <- st_geometry(city_shape)
return(geometries)
} else {
return(NA)
}
}
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(geometries = pmap(list(city, state), get_mp))
library(sf)
library(dplyr)
library(tigris)
library(readr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
View(city_data[[6]][[1]])
print(city_data[1])
print(city_data[1][6])
print(city_data[1][mp])
print(city_data$mp)
print(city_data$mp[1])
print(city_data$mp[1][geometry])
print(city_data$mp[1]$geometry)
print(city_data$mp[1])
View((city_data[[6]][[1]])[[13]][[1]])
view(city_data$mp[1])
View(city_data$mp[1])
print(city_data$mp[1])
print(city_data$mp[1][MULTIPOLYGON])
print(city_data$mp[1]$MULTIPOLYGON)
print(city_data$mp[1])
oo <- options(max.print=2e+06)  ## set and store defaults
options(oo)  ## restore defaults
print(city_data$mp[1])
print(city_data$mp[1])
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(ggplot2)
# Extract the first entry as an sf object
first_city <- city_data[1, ]
# Plot the geometry using ggplot2
ggplot(data = first_city) +
geom_sf() +
ggtitle(first_city$NAME) +
theme_minimal()
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
city_data_json <- toJSON(city_data, pretty = TRUE)
# Write the JSON to a file
write(city_data_json, "city_data.json")
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
city_data <- city_data %>% select(city, state, pop, lat, lon, mp)
city_data_json <- toJSON(city_data, pretty = TRUE)
# Write the JSON to a file
write(city_data_json, "city_data.json")
View(city_data[[6]][[6]])
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp[1])
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp[1])
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
city_data <- city_data %>% select(city, state, pop, lat, lon, mp)
city_data_json <- toJSON(city_data, pretty = TRUE)
# Write the JSON to a file
write(city_data_json, "city_data.json")
View(city_data[[6]][[1]])
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp$geometry)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
city_data <- city_data %>% select(city, state, pop, lat, lon, mp)
city_data_json <- toJSON(city_data, pretty = TRUE)
# Write the JSON to a file
write(city_data_json, "city_data.json")
View(city_data[[6]][[1]])
library(sf)
library(dplyr)
library(tigris)
library(readr)
library(jsonlite)
library(purrr)
# Load the CSV data
city_data <- read.csv("us_cities_population.csv")
# Convert population to numeric
city_data$pop <- as.numeric(gsub(",", "", city_data$pop))
# Filter cities with a population over 150,000
city_data <- city_data %>% filter(pop > 150000)
# Initialize columns for geometries and polygons
city_data$mp <- NA
# Function to retrieve shapefile for a city and convert it to coordinate pairs
get_mp <- function(city, state) {
# Retrieve shapefiles for places (incorporated cities) in the specified state
places <- tigris::places(state = state, cb = TRUE)
# Find the shapefile for the specified city
mp <- places %>% filter(NAME == city)
# Check if the city shapefile was found
if (nrow(mp) > 0) {
# Ensure it's a MULTIPOLYGON
mp <- st_cast(mp, "MULTIPOLYGON")
return(mp[1]$geometry)
} else {
return(NA)
}
}
# Apply the function to each row
city_data <- city_data %>%
mutate(mp = pmap(list(city, state), get_mp))
city_data <- city_data %>% select(city, state, pop, lat, lon, mp)
city_data_json <- toJSON(city_data, pretty = TRUE)
# Write the JSON to a file
write(city_data_json, "city_data.json")
